/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 .\public\shoe.gltf -r .\public\ -o .\src\app\Shoe.tsx -t 
*/

import * as THREE from 'three'
import React, { useEffect, useRef, useState } from 'react'
import { ThreeEvent, useFrame } from '@react-three/fiber';
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { proxy, useSnapshot } from 'valtio';
import { BaseViewerStateType, MaterialSelectionChoice } from '@/core/components';
import { RecordType } from '@/core/types';

type GLTFResult = GLTF & {
  nodes: {
    shoe: THREE.Mesh
    shoe_1: THREE.Mesh
    shoe_2: THREE.Mesh
    shoe_3: THREE.Mesh
    shoe_4: THREE.Mesh
    shoe_5: THREE.Mesh
    shoe_6: THREE.Mesh
    shoe_7: THREE.Mesh
  }
  materials: {
    laces: THREE.MeshStandardMaterial
    mesh: THREE.MeshStandardMaterial
    caps: THREE.MeshStandardMaterial
    inner: THREE.MeshStandardMaterial
    sole: THREE.MeshStandardMaterial
    stripes: THREE.MeshStandardMaterial
    band: THREE.MeshStandardMaterial
    patch: THREE.MeshStandardMaterial
  }
}

type ContextType = Record<string, React.ForwardRefExoticComponent<JSX.IntrinsicElements['mesh']>>

export type ShoeStateType = BaseViewerStateType & {
  laces?: string;
  mesh?: string;
  caps?: string;
  inner?: string;
  sole?: string;
  stripes?: string;
  band?: string;
  patch?: string;
};

export const shoeState = proxy<ShoeStateType>({
  currentSelection: null,
  hovering: null,
  choices: [],
});

type ChoiceType = {
  [key: string]: MaterialSelectionChoice[];
};

const choices: ChoiceType = {
  "laces": [
    { label: "Dark Green", color: "#042A2B" },
    { label: "Moon Stone", color: "#5EB1BF" },
    { label: "White", color: "#FCFCFC" },
    { label: "Classic Black", color: "#3F3F3F" },
  ],
  "mesh": [
    { label: "Dark Green", color: "#042A2B" },
    { label: "Moon Stone", color: "#5EB1BF" },
    { label: "White", color: "#FCFCFC" },
    { label: "Classic Black", color: "#3F3F3F" },
  ],
  "caps": [],
  "inner": [],
  "sole": [
    { label: "", color: "#ccc5b9" },
    { label: "", color: "#403d39" },
    { label: "", color: "#252422" },
    { label: "", color: "#ff7d00" },
  ],
  "stripes": [
    {label:"Orange", color: "#fb5607"},
    {label:"Purple", color: "#8338ec"},
    {label:"Pink", color: "#ff006e"},
    {label:"Blue", color: "#3a86ff"},
    { label: "White", color: "#FCFCFC" },
    { label: "Classic Black", color: "#3F3F3F" },
  ],
  "band": [],
  "patch": []
};

export type ShoePropsType = {
  state: ShoeStateType;
} & JSX.IntrinsicElements['group'];

export function Shoe(props: ShoePropsType) {
  const { state, ...restProps } = props;
  const { nodes, materials } = useGLTF('/shoe.gltf') as GLTFResult;
  const ref = useRef<any>();
  const [hovered, set] = useState(null);

  useEffect(() => {
    if (hovered) {
      shoeState.hovering = hovered;
    } else {
      shoeState.hovering = null;
    }
  }, [hovered]);

  const onSelection = (e: ThreeEvent<MouseEvent>) => {
    e.stopPropagation();
    const mat = (e.object as any).material.name;
    shoeState.currentSelection = mat;
    shoeState.choices = choices[mat] || [];
  };

  useFrame((state) => {
    if (ref.current) {
      const t = state.clock.getElapsedTime()
      ref.current.rotation.set(Math.cos(t / 4) / 8, Math.sin(t / 4) / 8, -0.2 - (1 + Math.sin(t / 1.5)) / 20)
      ref.current.position.y = (1 + Math.sin(t / 1.5)) / 10
    }
  });

  return (
    <group 
      {...restProps} 
      dispose={null} 
      ref={ref} 
      scale={1} 
      onPointerOver={(e:any) => (e.stopPropagation(), set(e.object.material.name))}
      onPointerOut={(e) => (e.intersections.length === 0 && set(null))}
      onPointerMissed={() => (shoeState.hovering = null, shoeState.currentSelection = null, shoeState.choices=[])}
      onClick={onSelection}
    >
      <mesh receiveShadow castShadow geometry={nodes.shoe.geometry} material={materials.laces} material-color={state.laces} />
      <mesh receiveShadow castShadow geometry={nodes.shoe_1.geometry} material={materials.mesh} material-color={state.mesh} />
      <mesh receiveShadow castShadow geometry={nodes.shoe_2.geometry} material={materials.caps} material-color={state.caps} />
      <mesh receiveShadow castShadow geometry={nodes.shoe_3.geometry} material={materials.inner} material-color={state.inner} />
      <mesh receiveShadow castShadow geometry={nodes.shoe_4.geometry} material={materials.sole} material-color={state.sole} />
      <mesh receiveShadow castShadow geometry={nodes.shoe_5.geometry} material={materials.stripes} material-color={state.stripes} />
      <mesh receiveShadow castShadow geometry={nodes.shoe_6.geometry} material={materials.band} material-color={state.band} />
      <mesh receiveShadow castShadow geometry={nodes.shoe_7.geometry} material={materials.patch} material-color={state.patch} />
    </group>
  )
}

useGLTF.preload('/shoe.gltf');
